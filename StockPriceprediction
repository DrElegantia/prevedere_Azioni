import math
import numpy as np
import pandas as pd

from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
plt.style.use("fivethirtyeight")
import yfinance as yf

# Scarica i dati storici delle azioni dal 1 gennaio 2012 al 18 dicembre 2019
df =  yf.download('^GSPC', start='2013-01-01', end='2023-08-23')

# Crea un nuovo DataFrame contenente solo la colonna "Close"
data = df.filter(["Close"])
data

# Converte il DataFrame in un array numpy
dataset = data.values

# Ottieni il numero di righe su cui addestrare il modello
lunghezza = math.ceil(len(dataset) * 0.8)
# Ridimensiona i dati tra 0 e 1
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(dataset)

scaled_data

train_data = scaled_data[0:lunghezza, :]

# Suddivide i dati in x_train e y_train
x_train = []
y_train = []

for i in range(60, len(train_data)):
    x_train.append(train_data[i-60:i, 0])
    y_train.append(train_data[i, 0])


# Converte x_train e y_train in array numpy
x_train, y_train = np.array(x_train), np.array(y_train)

# Ridimensiona i dati
x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))
x_train.shape

# Costruisci il modello LSTM
model = Sequential()
model.add(LSTM(50, return_sequences=True, input_shape=(x_train.shape[1], 1)))
model.add(LSTM(50, return_sequences=False))
model.add(Dense(25))
model.add(Dense(1))

# Compila il modello
model.compile(optimizer="adam", loss="mean_squared_error")

# Addestra il modello
model.fit(x_train, y_train, batch_size=1, epochs=1)

# Crea il set di dati di test
test_data = scaled_data[lunghezza - 60:, :]

# Crea i set di dati x_test e y_test
x_test = []
y_test = dataset[lunghezza:, :]

for i in range(60, len(test_data)):
    x_test.append(test_data[i-60:i, 0])

# Converte i dati in un array numpy
x_test = np.array(x_test)

# Ridimensiona i dati
x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))

# Ottieni le previsioni del modello sui prezzi
predizione = model.predict(x_test)

# Visualizza i dati
train = data[:lunghezza]
prezzi = data[lunghezza:]
prezzi["Previsioni"] = predizione

plt.figure(figsize=(16, 8))
plt.title("Modello")
plt.xlabel("Data", fontsize=18)
plt.ylabel("Prezzo di chiusura in USD ($)", fontsize=18)
plt.plot(train["Close"])
plt.plot(prezzi[["Close", "Previsioni"]])
plt.legend(["Addestramento", "Test", "Previsioni"], loc="lower right")
plt.show()


df_2 =  yf.download('^GSPC', start='2013-01-01', end='2023-08-23')
# Crea un nuovo DataFrame con la colonna "Close"
new_df = df_2.filter(["Close"])

# Prendi gli ultimi 60 giorni dei dati e convertili in un array
u60 = new_df[-60:].values

# Ridimensiona i dati tra 0 e 1
u60_scalato = scaler.transform(u60)

# Crea una lista vuota
X_test = []

# Aggiungi gli ultimi 60 giorni
X_test.append(u60_scalato)

X_test = np.array(X_test)

# Ridimensiona X_test
X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))

# Ottieni il prezzo previsto in scala
pred_price = model.predict(X_test)

# Inverti la scala
pred_price = scaler.inverse_transform(pred_price)
print(pred_price)

# Ottieni i dati di chiusura effettivi di Apple per il 16 e il 17 dicembre 2019
df_3 = yf.download('^GSPC', start='2023-08-23', end='2023-08-24')
df_3

